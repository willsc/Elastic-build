apiVersion: apps/v1
kind: StatefulSet 
metadata:
  name: {{ include "kafka.fullname" . }}
  labels:
    {{- include "kafka.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  updateStrategy:
    type: RollingUpdate
  serviceName:  {{ .Values.serviceName }}
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - kafka
              topologyKey: "kubernetes.io/hostname"
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "kafka.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          - containerPort: 9092
            name: kafka-0
          - containerPort: 9093
            name: kafka-1
          - containerPort: 9094
            name: kafka-2 
          env:
            - name: MY_METADATA_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: STAS_DELAY
              value: "120"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper:2181 # zookeeper-2.zookeeper.default.svc.cluster.local
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "INSIDE://$(MY_POD_IP):9092"
            - name: KAFKA_LISTENERS
              value: "INSIDE://$(MY_POD_IP):9092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INSIDE:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INSIDE"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_PORT
              value: "9092"
            - name: KAFKA_LOG_DIRS
              value: "/kafka-logs"
            - name: JMX_PORT
              value: "9999"  
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: logs
              mountPath: /kafka-logs
              subPath: logs    
 {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: logs
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "{{ .Values.persistence.dataDirSize }}"
      {{- if .Values.persistence.dataDirStorageClass }}
      {{- if (eq "-" .Values.persistence.dataDirStorageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.persistence.dataDirStorageClass }}"
      {{- end }}
      {{- end }}
  {{- end }}     